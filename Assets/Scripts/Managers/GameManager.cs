using System.Collections;
using System.Collections.Generic;
using Unity.Netcode;
using UnityEngine;
using UnityEngine.Events;

public class GameManager : NetworkBehaviour
{
    [SerializeField] private CardManager cardManager;
    [SerializeField] private UIManager uiManager;
    [SerializeField] private int playersRequired = 2;

    private NetworkVariable<GamePhase> currentPhase = new NetworkVariable<GamePhase>(GamePhase.WaitingForPlayers);
    private NetworkVariable<int> connectedPlayers = new NetworkVariable<int>(0);


    private NetworkVariable<int> player1Health = new NetworkVariable<int>(3);
    private NetworkVariable<int> player2Health = new NetworkVariable<int>(3);
    private NetworkVariable<ulong> player1Id = new NetworkVariable<ulong>(ulong.MaxValue);
    private NetworkVariable<ulong> player2Id = new NetworkVariable<ulong>(ulong.MaxValue);


    private void Start()
    {
        GlobalEventManager.OnDealingComplete.AddListener(OnDealingComplete);
        GlobalEventManager.OnSelectionComplete.AddListener(OnSelectionComplete);
        GlobalEventManager.OnWinnerSelected.AddListener(OnShowResult);
    }
    public override void OnNetworkSpawn()
    {
        if (IsServer)
        {
            currentPhase.OnValueChanged += OnPhaseChanged;
            InitializePlayers();
            CheckGameReady();
        }
        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
        player1Health.OnValueChanged += OnPlayer1HealthChanged;
        player2Health.OnValueChanged += OnPlayer2HealthChanged;
    }
    public override void OnNetworkDespawn()
    {
        // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
        currentPhase.OnValueChanged -= OnPhaseChanged;
        //–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –∑–¥–æ—Ä–æ–≤—å—è
        player1Health.OnValueChanged -= OnPlayer1HealthChanged;
        player2Health.OnValueChanged -= OnPlayer2HealthChanged;
    }

    private void OnPhaseChanged(GamePhase previousPhase, GamePhase newPhase)
    {
        if (!IsServer) return;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π —Ñ–∞–∑—ã
        HandleNewPhase(newPhase);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ–∞–∑—ã
    private void HandleNewPhase(GamePhase phase)
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        switch (currentPhase.Value)
        {
            case GamePhase.DealingCards:
                DealCards();
                break;
            case GamePhase.PlayerSelection:
                SelectionCards();
                break;
            case GamePhase.Resolution:
                ResolveRound();
                break;
            case GamePhase.GameOver:
                GameOver();
                break;
        }
    }

    private void CheckGameReady()
    {
        if (IsServer)
        {
            Debug.Log("—Ç—É–∫ —Ç—É–∫");
            StartCoroutine(StartGame());
        }
    }

    private IEnumerator StartGame()
    {
        while (currentPhase.Value == GamePhase.WaitingForPlayers)
        {
            connectedPlayers.Value = NetworkManager.Singleton.ConnectedClients.Count;
            if (connectedPlayers.Value >= playersRequired)
            {
                Debug.Log("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...");
                currentPhase.Value = GamePhase.DealingCards;
            }
            yield return new WaitForSeconds(0.5f);
        }
    }

    // üî• –î–û–ë–ê–í–ò–¢–¨: –ú–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    private void ResetGameState()
    {
        if (!IsServer) return;

        player1Health.Value = 3;
        player2Health.Value = 3;

        Debug.Log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–æ. –ó–¥–æ—Ä–æ–≤—å–µ: 3/3");

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        UpdateHealthUI();
    }

    //–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
    private void InitializePlayers()
    {
        player1Id.Value = 0;
        player2Id.Value = 1;

        player1Health.Value = 3;
        player2Health.Value = 3;

        Debug.Log($"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–æ—Ä–æ–≤—å–µ: P1={player1Health.Value}, P2={player2Health.Value}");
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∑–¥–æ—Ä–æ–≤—å—è
        UpdateHealthUI();
    }

    private void OnPlayer1HealthChanged(int oldHealth, int newHealth)
    {
        UpdateHealthUI();
        CheckGameOver();
    }

    private void OnPlayer2HealthChanged(int oldHealth, int newHealth)
    {
        UpdateHealthUI();
        CheckGameOver();
    }

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    private void CheckGameOver()
    {
        if (!IsServer) return;

        if (player1Health.Value <= 0 || player2Health.Value <= 0)
        {
            currentPhase.Value = GamePhase.GameOver;
        }
    }

    [ClientRpc]
    private void GameOverClientRpc(ulong winnerId)
    {
        if (winnerId == ulong.MaxValue)
        {
            uiManager.ShowWinnerText("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ù–∏—á—å—è!");
        }
        else
        {
            bool isWinner = NetworkManager.Singleton.LocalClientId == winnerId;
            uiManager.ShowWinnerText(isWinner ? "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!" : "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!");
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        if (IsServer)
        {
            Invoke("RestartGame", 5f);
        }
    }

    //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∑–¥–æ—Ä–æ–≤—å—è
    private void UpdateHealthUI()
    {
        if (uiManager != null)
        {
            uiManager.ShowHealthUI(player1Health.Value, player2Health.Value);
        }
    }
    // –≠—Ç–∞–ø 2: –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
    private void DealCards()
    {
        cardManager.DealCards();
    }
    private void OnDealingComplete()
    {
        currentPhase.Value = GamePhase.PlayerSelection;
    }

    // –≠—Ç–∞–ø 3: –í—ã–±–æ—Ä –∫–∞—Ä—Ç
    private void SelectionCards()
    {
        cardManager.SelectionCards();

    }
    private void OnSelectionComplete()
    {
        currentPhase.Value = GamePhase.Resolution;
    }

    private void ResolveRound()
    {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        if (IsServer)
        {
            cardManager.WinnerSelectionCards();
        }
    }

    private void GameOver()
    {
        ulong winnerId = player1Health.Value > 0 ? player1Id.Value : player2Id.Value;
        GameOverClientRpc(winnerId);
    }
    private void OnShowResult(ulong player)
    {
        ulong winnerId = player;

        if (winnerId == player1Id.Value)
        {
            player2Health.Value -= 1; // –ü—Ä–æ–∏–≥—Ä–∞–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
        }
        else if (winnerId == player2Id.Value)
        {
            player1Health.Value -= 1; // –ü—Ä–æ–∏–≥—Ä–∞–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
        }

        OnShowResultClientRpc(winnerId);

        if (currentPhase.Value != GamePhase.GameOver)
            Invoke("StartNewRound", 2f);
    }


    [ClientRpc]
    private void OnShowResultClientRpc(ulong winnerId)
    {
        // Netcode –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ –Ω–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö
        ShowResultUI(winnerId);
    }
    private void ShowResultUI(ulong winnerId)
    {
        if (winnerId == ulong.MaxValue)
        {
            uiManager.ShowWinnerText("–Ω–∏—á—å—è");
        }
        else
        {
            bool isWinner = NetworkManager.Singleton.LocalClientId == winnerId;
            uiManager.ShowWinnerText(isWinner ? "–ø–æ–±–µ–¥–∞!" : "–ø—Ä–æ–∏–≥—Ä—ã—à");
        }
    }

    private void StartNewRound()
    {
        if (IsServer)
        {
            currentPhase.Value = GamePhase.DealingCards;
        }
    }

    private void RestartGame()
    {
        if (IsServer)
        {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
            StartCoroutine(RestartGameCoroutine());
        }
    }
    private IEnumerator RestartGameCoroutine()
    {
        Debug.Log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...");

        if (IsServer)
        {
            ResetGameState();
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        GameRestartClientRpc();
        yield return new WaitForSeconds(2f);

        if (IsServer)
        {
            // üî• –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
            ShutdownNetwork();

            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            yield return new WaitUntil(() => !NetworkManager.Singleton.IsListening);
            yield return new WaitForSeconds(0.5f);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –º–µ–Ω—é
            UnityEngine.SceneManagement.SceneManager.LoadScene("LobbyScene");
        }
    }

    [ClientRpc]
    private void GameRestartClientRpc()
    {
        uiManager.ShowWinnerText("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");

        // –ù–∞ –∫–ª–∏–µ–Ω—Ç–∞—Ö —Ç–æ–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if (NetworkManager.Singleton.IsClient && !NetworkManager.Singleton.IsServer)
        {
            StartCoroutine(ClientShutdown());
        }
    }

    private IEnumerator ClientShutdown()
    {
        yield return new WaitForSeconds(1.5f);
        if (NetworkManager.Singleton.IsClient)
        {
            NetworkManager.Singleton.Shutdown();
        }
        yield return new WaitForSeconds(1.5f);
        UnityEngine.SceneManagement.SceneManager.LoadScene("LobbyScene");
    }

    private void ShutdownNetwork()
    {
        if (NetworkManager.Singleton != null && NetworkManager.Singleton.IsListening)
        {
            NetworkManager.Singleton.Shutdown();
            Debug.Log("NetworkManager shutdown completed");
        }
    }
}